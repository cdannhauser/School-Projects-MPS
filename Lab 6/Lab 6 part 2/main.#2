//-------------------------------------------------------------------------------------------
// Includes
//-------------------------------------------------------------------------------------------
#include <c8051f120.h>          // SFR declarations.
#include <stdio.h>              // Necessary for printf.
#include "putget.h"             // Necessary for printf
#include "LCD.h"
#include "keypad.h"
//-------------------------------------------------------------------------------------------
// Global CONSTANTS
//-------------------------------------------------------------------------------------------
#define EXTCLK      22118400    // External oscillator frequency in Hz
#define SYSCLK      49766400    // Output of PLL derived from (EXTCLK * 9/4)
#define BAUDRATE    115200      // UART baud rate in bps
//#define BAUDRATE  19200       // UART baud rate in bps

__bit SW2press = 0;
//-------------------------------------------------------------------------------------------
// Function PROTOTYPES
//-------------------------------------------------------------------------------------------
void main(void);
void PORT_INIT(void);
void SYSCLK_INIT(void);
void UART0_INIT(void);

void TR0_ISR(void) __interrupt 1;

long rand();

char loop(void);

char get_char();

char buttonPressed = 0;
unsigned int TR0_count, debounceCount, startTime;

char choice, random;

const char* days[7] = {"Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"};

unsigned int* seed = &TR0_count;

//-------------------------------------------------------------------------------------------
// MAIN Routine
//-------------------------------------------------------------------------------------------
void main (void)
{
    __bit restart = 0;
//    char character;
//    unsigned int delay1, delay2 = 0;
//    unsigned int randnum = 0;
//    unsigned int ones, tenths = 0;

    SFRPAGE = CONFIG_PAGE;

    PORT_INIT();                // Configure the Crossbar and GPIO.
    SYSCLK_INIT();              // Initialize the oscillator.
    UART0_INIT();               // Initialize UART0.
	lcd_init();
	keypad_init();

    SFRPAGE = LEGACY_PAGE;
    IT0     = 1;                // /INT0 is active low triggered.

    SFRPAGE = UART0_PAGE;       // Direct the output to UART0
                                // printf() must set its own SFRPAGE to UART0_PAGE
    printf("\033[2J");          // Erase screen and move cursor to the home position.
    printf("Hello darkness my old friend\n\n\r");
	lcd_puts((char*) &"Hello darkness");
	lcd_goto(40);
	lcd_puts((char*) &"my old friend");


    SFRPAGE = CONFIG_PAGE;
    EX0     = 1;                // Enable Ext Int 0 only after everything is settled.
	
	SFRPAGE = UART0_PAGE;
	
	TR0_count = debounceCount = 0;
	TR0 = 1;

	printf("Select answer type if you feel like it I don't tell you what to do\n\r");
	printf("1. Yes/No\n\r");
	printf("2. True/False\n\r");
	printf("3. Random day of week\n\r");
	printf("4. Random number\n\r");
	
    while (1)                  
    {
		loop();
	}
}

char loop(void){
		unsigned char lowerBound, upperBound, temp, i;
		char buffer[3];

		lowerBound = upperBound = 0;
		
		choice = get_char();

		printf("%c\n\r", choice);

		lcd_clear();

		printf("\033[2J");

		printf("Select answer type if you feel like it I don't tell you what to do\n\r");
		printf("1. Yes/No\n\r");
		printf("2. True/False\n\r");
		printf("3. Random day of week\n\r");
		printf("4. Random number\n\r");

		switch(choice){
			case '1':
				random = rand() % 10;
				if(random <= 4) lcd_puts((char*) &"Yes");
				else lcd_puts((char*) &"No");
				break;
			case '2':
				random = rand() % 2;
				if(random == 0) lcd_puts((char*) &"True");
				else lcd_puts((char*) &"False");
				break;
			case '3':
				random = rand() % 7;
				lcd_puts((char*) (days[random]));
				break;
			case '4':
				lcd_puts((char*) &"Lower bound:");
				while(1){
					temp = get_char();
					if(temp == '#') break;
					lcd_puts(&temp);
					lowerBound = lowerBound * 10 + temp - '0';
				}
				lcd_goto(40);
				lcd_puts((char*) &"Upper bound:");
				while(1){
					temp = get_char();
					if(temp == '#') break;
					lcd_puts(&temp);
					upperBound = upperBound * 10 + temp - '0';
				}
				random = (rand() % (upperBound+1 - lowerBound)) + lowerBound;

				lcd_clear();
				
				for(i=0; i<3; i++) {buffer[i] = 0;}
			
				i = 0;
				if(random/100 != 0){
					buffer[i] = random/100 + '0';
					printf("%c", random/100 + '0');
					random -= (random/100) * 100;
					i++;
					buffer[i] = random/10 + '0'; 
					printf("%c", random/10 + '0');
					random -= (random/10) * 10;
					i++;
				}
				else if(random/10 != 0){
					buffer[i] = random/10 + '0'; 
					printf("%c", random/10 + '0');
					random -= (random/10) * 10;
					i++;
				}
				buffer[i] = random + '0';
				lcd_puts(buffer);
				break;
			
		}
		
		return 0;
}

//Generate random number from MIN_TIME to MAX_TIME with .1 second resolution
long rand() {
	seed++;
	return ((long)*seed) << 16 | TR0_count; 
}

char get_char(){
	char temp;
	while(1){
		debounceCount = TR0_count;
		temp = keypad_read();
		if(temp != 0) break;
		while(TR0_count - debounceCount < 10);
	}
	return temp;
}

//-------------------------------------------------------------------------------------------
// Interrupt Service Routines
//-------------------------------------------------------------------------------------------
// NOTE: this is an example of what NOT to do in an interrupt handler. No I/O should be done
// in ISRs since I/O is very slow and the handler must execute very quickly.
//
// This routine stops Timer0 when the user presses SW2.
//


void TR0_ISR(void) __interrupt 1{
	TR0_count++;
	TH0 = 0x0D;
	TL0 = 0x00;
}


//-------------------------------------------------------------------------------------------
// PORT_Init
//-------------------------------------------------------------------------------------------
//
// Configure the Crossbar and GPIO ports
//
void PORT_INIT(void)
{
    char SFRPAGE_SAVE;

    SFRPAGE_SAVE = SFRPAGE;     // Save Current SFR page.

    SFRPAGE = CONFIG_PAGE;
    WDTCN   = 0xDE;             // Disable watchdog timer.
    WDTCN   = 0xAD;
    EA      = 1;                // Enable interrupts as selected.

    XBR0    = 0x04;             // Enable UART0.
    XBR1    = 0x04;             // /INT0 routed to port pin.
    XBR2    = 0x40;             // Enable Crossbar and weak pull-ups.

    P0MDOUT = 0x01;             // P0.0 (TX0) is configured as Push-Pull for output.
            // P0.1 (RX0) is configure as Open-Drain input.
            // P0.2 (SW2 through jumper wire) is configured as Open_Drain for input.
    P0      = 0x06;             // Additionally, set P0.0=0, P0.1=1, and P0.2=1.

// P7 is used for the control signals, P7.2 = E, P7.1 = RW, P7.0 = RS, output only
// P6 is used for data: P6.7 is read to get the status of the LCD 
// P6 must be configured as bidirectional (open-drain) and set to FF (or at least 80) 
// before reading the status of P6.7

	P7MDOUT = 0xFF;
	P6MDOUT = 0x00;
	P6 = 0xFF;

    SFRPAGE = SFRPAGE_SAVE;     // Restore SFR page.
}

//-------------------------------------------------------------------------------------------
// SYSCLK_Init
//-------------------------------------------------------------------------------------------
//
// Initialize the system clock
//
void SYSCLK_INIT(void)
{
    int i;

    char SFRPAGE_SAVE;

    SFRPAGE_SAVE = SFRPAGE;     // Save Current SFR page.

    SFRPAGE = CONFIG_PAGE;
    OSCXCN  = 0x67;             // Start external oscillator
    for(i=0; i < 256; i++);     // Wait for the oscillator to start up.
    while(!(OSCXCN & 0x80));    // Check to see if the Crystal Oscillator Valid Flag is set.
    CLKSEL  = 0x01;             // SYSCLK derived from the External Oscillator circuit.
    OSCICN  = 0x00;             // Disable the internal oscillator.

    SFRPAGE = CONFIG_PAGE;
    PLL0CN  = 0x04;
    SFRPAGE = LEGACY_PAGE;
    FLSCL   = 0x10;
    SFRPAGE = CONFIG_PAGE;
    PLL0CN |= 0x01;
    PLL0DIV = 0x04;
    PLL0FLT = 0x01;
    PLL0MUL = 0x09;
    for(i=0; i < 256; i++);
    PLL0CN |= 0x02;
    while(!(PLL0CN & 0x10));
    CLKSEL  = 0x02;             // SYSCLK derived from the PLL.

	ET0 = 1;
	CKCON |= 0x08;
	
	SFRPAGE = TIMER01_PAGE;
	TMOD &= 0xFD;
	TMOD |= 0x01;

	TH0 = 0x0D;
	TL0 = 0x00;

    SFRPAGE = SFRPAGE_SAVE;     // Restore SFR page.
}

//-------------------------------------------------------------------------------------------
// UART0_Init
//-------------------------------------------------------------------------------------------
//
// Configure the UART0 using Timer1, for <baudrate> and 8-N-1.
//
void UART0_INIT(void)
{
    char SFRPAGE_SAVE;

    SFRPAGE_SAVE = SFRPAGE;     // Save Current SFR page.

    SFRPAGE = TIMER01_PAGE;
    TMOD   &= ~0xF0;
    TMOD   |=  0x20;            // Timer1, Mode 2: 8-bit counter/timer with auto-reload.
    TH1     = (unsigned char)-(SYSCLK/BAUDRATE/16); // Set Timer1 reload value for baudrate
    CKCON  |= 0x10;             // Timer1 uses SYSCLK as time base.
    TL1     = TH1;
    TR1     = 1;                // Start Timer1.

    SFRPAGE = UART0_PAGE;
    SCON0   = 0x50;             // Set Mode 1: 8-Bit UART
    SSTA0   = 0x10;             // UART0 baud rate divide-by-two disabled (SMOD0 = 1).
    TI0     = 1;                // Indicate TX0 ready.

    SFRPAGE = SFRPAGE_SAVE;     // Restore SFR page.
}